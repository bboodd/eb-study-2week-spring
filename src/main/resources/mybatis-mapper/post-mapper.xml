<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.study.week2.mapper.PostMapper">

<!--    post 테이블 전체 컬럼   -->
    <sql id="postColumns">
          post_id
        , category_id
        , writer
        , password
        , title
        , content
        , view_count
        , create_date
        , update_date
        , status
    </sql>

<!--    category 테이블 전체 컬럼   -->
    <sql id="categoryColumns">
          category_id
        , category_name
    </sql>

<!--    file 테이블 전체 컬럼   -->
    <sql id="fileColumns">
          file_id
        , post_id
        , file_original_name
        , file_name
        , file_path
        , file_size
        , status
    </sql>

<!--    comment 테이블 전체 컬럼   -->
    <sql id="commentColumns">
          comment_id
        , post_id
        , content
        , create_date
    </sql>

<!--    검색 조건   -->
    <sql id="search">
        <where>
            <if test="startDate != null and startDate != ''">
                AND create_date >= #{startDate}
            </if>

            <if test="endDate != null and endDate != ''">
                AND #{endDate} >= create_date
            </if>

            <if test="categoryId != null and categoryId != ''">
                AND category_id = #{categoryId}
            </if>
            <if test="keyword != null and keyword != ''">
                AND CONCAT(title, writer, content) LIKE CONCAT('%', #{keyword}, '%')
            </if>
            AND status = 1
        </where>
    </sql>

    <!--    게시글 등록-->
    <insert id="savePost" parameterType="com.study.week2.vo.PostVo" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (
            <include refid="postColumns" />
        ) VALUES (
              #{postId}
            , #{categoryId}
            , #{writer}
            , #{password}
            , #{title}
            , #{content}
            , 0
            , NOW()
            , NOW()
            , 1
        )
    </insert>

    <!--    전체 카테고리 리스트 가져오기-->
    <select id="findAllCategory" resultType="com.study.week2.vo.CategoryVo">
        SELECT
            <include refid="categoryColumns"></include>
        FROM
            category
    </select>

    <!--    게시글 리스트 가져오기-->
    <select id="findAllPostBySearch" parameterType="com.study.week2.vo.SearchVo" resultType="com.study.week2.vo.PostVo">
        SELECT
            <include refid="postColumns"></include>
          , (SELECT category_name FROM category category WHERE category.category_id = post.category_id) AS categoryName
          , NULLIF((SELECT COUNT(*) FROM file file WHERE file.post_id = post.post_id), 0) AS fileCount
        FROM
            post
        <include refid="search"></include>
        ORDER BY post_id DESC
    </select>

<!--    게시글 비밀번호 가져오기   -->
    <select id="findPostPasswordById" parameterType="int" resultType="java.lang.String">
        SELECT
            password
        FROM
            post
        WHERE
            post_id = #{postId}
    </select>

    <!--    선택 게시글 가져오기  -->
    <select id="findPostById" parameterType="int" resultType="com.study.week2.vo.PostVo">
        SELECT
            <include refid="postColumns"></include>
          , (SELECT category_name FROM category WHERE category.category_id = post.category_id) AS categoryName
        FROM
            post
        WHERE
            post_id = #{postId}
    </select>

    <!--    선택 게시글 조회수 증가  -->
    <update id="increaseViewCountById" parameterType="int">
        UPDATE
            post
        SET
            view_count = view_count + 1
        WHERE
            post_id = #{postId}
    </update>

    <!--    댓글 추가  -->
    <insert id="saveComment" parameterType="com.study.week2.vo.CommentVo" useGeneratedKeys="true" keyProperty="commentId">
        INSERT INTO comment(
            <include refid="commentColumns"></include>
        )
        VALUES (
            #{commentId}
          , #{postId}
          , #{content}
          , NOW()
        )
    </insert>

    <!--    postId에 해당하는 댓글 리스트로 불러오기  -->
    <select id="findAllCommentByPostId" parameterType="int" resultType="com.study.week2.vo.CommentVo">
        SELECT
            <include refid="commentColumns"></include>
        FROM
            comment
        WHERE
            post_id = #{postId}
    </select>

    <!--    게시글 삭제 구현 ( state를 0으로 만든다 )   -->
    <update id="deletePostById" parameterType="int">
        UPDATE
            post
        SET
            status = 0
        WHERE
            post_id = #{postId}
    </update>

    <!--    파일 업로드  -->
    <insert id="saveFile" parameterType="com.study.week2.vo.FileVo" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO file(
            <include refid="fileColumns"></include>
        )
        VALUES (
              #{fileId}
            , #{postId}
            , #{fileOriginalName}
            , #{fileName}
            , #{filePath}
            , #{fileSize}
            , 1
        )
    </insert>

    <!--    postId에 해당하는 파일 리스트 가져오기   -->
    <select id="findAllFileByPostId" parameterType="int" resultType="com.study.week2.vo.FileVo">
        SELECT
            <include refid="fileColumns"></include>
        FROM
            file
        WHERE
              post_id = ${postId}
          AND status = 1
    </select>

    <!--    파일 id에 해당하는 파일 가져오기  -->
    <select id="findFileById" parameterType="int" resultType="com.study.week2.vo.FileVo">
        SELECT
            <include refid="fileColumns"></include>
        FROM
            file
        WHERE
              file_id = ${fileId}
          AND status = 1
    </select>

<!--    게시글 업데이트  -->
    <update id="updatePost" parameterType="com.study.week2.vo.PostVo">
        UPDATE post
        SET
              category_id = #{categoryId}
            , writer = #{writer}
            , title = #{title}
            , content = #{content}
            , update_date = NOW()
        WHERE
            post_id = #{postId}
    </update>

    <!--    파일 삭제 구현 ( state를 0으로 만든다 )   -->
    <update id="deleteFileById" parameterType="int">
        UPDATE
            file
        SET
            status = 0
        WHERE
            file_id = #{fileId}
    </update>

</mapper>
